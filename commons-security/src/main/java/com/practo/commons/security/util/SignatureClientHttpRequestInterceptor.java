package com.practo.commons.security.util;

import java.io.IOException;

import org.springframework.http.HttpRequest;
import org.springframework.http.client.ClientHttpRequestExecution;
import org.springframework.http.client.ClientHttpRequestInterceptor;
import org.springframework.http.client.ClientHttpResponse;
import org.springframework.web.client.RestTemplate;

import com.practo.commons.security.config.SecureProperties;

/**
 * An implementation of the {@link ClientHttpRequestInterceptor} that can be used to add to a
 * {@link RestTemplate}. This implementation is essentially a wrapper for
 * {@link SignatureHeadersGenerator} and adds the auth headers generated by it to the http request.
 * You can use {@link SignatureRestTemplateFactory} to create service-specific RestTemplate objects
 * with this interceptor added automatically.
 */
public class SignatureClientHttpRequestInterceptor implements ClientHttpRequestInterceptor {

  private SignatureHeadersGenerator headersGenerator;

  /**
   * Creates a new {@link SignatureClientHttpRequestInterceptor} for the given service.
   *
   * @param serviceName
   * @param secureProperties
   * @see See {@link SignatureRestTemplateFactory#create(String)}.
   */
  public SignatureClientHttpRequestInterceptor(String serviceName,
      SecureProperties secureProperties) {
    this.headersGenerator = new SignatureHeadersGenerator(serviceName, secureProperties);
  }

  /**
   * Creates a new {@link SignatureClientHttpRequestInterceptor} using the given
   * {@link SignatureHeadersGenerator}.
   *
   * @param headersGenerator
   * @see See {@link SignatureRestTemplateFactory#create(String)}.
   */
  public SignatureClientHttpRequestInterceptor(SignatureHeadersGenerator headersGenerator) {
    this.headersGenerator = headersGenerator;
  }

  @Override
  public ClientHttpResponse intercept(HttpRequest request, byte[] body,
      ClientHttpRequestExecution execution) throws IOException {
    request.getHeaders().addAll(headersGenerator.generate(request));

    return execution.execute(request, body);
  }

}
